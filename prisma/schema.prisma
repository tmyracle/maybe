generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "tracing"]
  binaryTargets   = ["native", "linux-musl", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("NX_DATABASE_URL")
}

model AccountBalance {
  date      DateTime @db.Date
  accountId Int      @map("account_id")
  balance   Decimal  @db.Decimal(19, 4)
  inflows   Decimal? @default(0) @db.Decimal(19, 4)
  outflows  Decimal? @default(0) @db.Decimal(19, 4)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@id([accountId, date])
  @@index([date])
  @@map("account_balance")
}

model AccountConnection {
  id                         Int                     @id @default(autoincrement())
  createdAt                  DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                  DateTime                @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  name                       String
  type                       AccountConnectionType
  plaidItemId                String?                 @unique @map("plaid_item_id")
  plaidAccessToken           String?                 @map("plaid_access_token")
  userId                     Int                     @map("user_id")
  plaidConsentExpiration     DateTime?               @map("plaid_consent_expiration")
  plaidError                 Json?                   @map("plaid_error")
  status                     AccountConnectionStatus @default(OK)
  plaidNewAccountsAvailable  Boolean                 @default(false) @map("plaid_new_accounts_available")
  plaidInstitutionId         String?                 @map("plaid_institution_id")
  syncStatus                 AccountSyncStatus       @default(IDLE) @map("sync_status")
  finicityInstitutionId      String?                 @map("finicity_institution_id")
  finicityInstitutionLoginId String?                 @map("finicity_institution_login_id")
  finicityError              Json?                   @map("finicity_error")
  accounts                   Account[]
  user                       User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("account_connection")
}

model Account {
  id                       Int                     @id @default(autoincrement())
  createdAt                DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                DateTime                @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  name                     String
  plaidAccountId           String?                 @map("plaid_account_id")
  isActive                 Boolean                 @default(true) @map("is_active")
  plaidType                String?                 @map("plaid_type")
  plaidSubtype             String?                 @map("plaid_subtype")
  availableBalanceProvider Decimal?                @map("available_balance_provider") @db.Decimal(19, 4)
  accountConnectionId      Int?                    @map("account_connection_id")
  currencyCode             String                  @default("USD") @map("currency_code")
  propertyMeta             Json?                   @map("property_meta")
  vehicleMeta              Json?                   @map("vehicle_meta")
  userId                   Int?                    @map("user_id")
  subcategoryUser          String?                 @map("subcategory_user")
  startDate                DateTime?               @map("start_date") @db.Date
  syncStatus               AccountSyncStatus       @default(IDLE) @map("sync_status")
  mask                     String?
  plaidLiability           Json?                   @map("plaid_liability")
  finicityAccountId        String?                 @map("finicity_account_id")
  finicityDetail           Json?                   @map("finicity_detail")
  finicityType             String?                 @map("finicity_type")
  provider                 AccountProvider
  categoryProvider         AccountCategory?        @map("category_provider")
  categoryUser             AccountCategory?        @map("category_user")
  category                 AccountCategory         @default(dbgenerated("COALESCE(category_user, category_provider, 'other'::\"AccountCategory\")"))
  subcategoryProvider      String?                 @map("subcategory_provider")
  type                     AccountType
  subcategory              String                  @default(dbgenerated("COALESCE(subcategory_user, subcategory_provider, 'other'::text)"))
  classification           AccountClassification   @default(dbgenerated("\nCASE\n    WHEN (type = ANY (ARRAY['INVESTMENT'::\"AccountType\", 'DEPOSITORY'::\"AccountType\", 'PROPERTY'::\"AccountType\", 'VEHICLE'::\"AccountType\", 'OTHER_ASSET'::\"AccountType\"])) THEN 'asset'::\"AccountClassification\"\n    WHEN (type = ANY (ARRAY['CREDIT'::\"AccountType\", 'LOAN'::\"AccountType\", 'OTHER_LIABILITY'::\"AccountType\"])) THEN 'liability'::\"AccountClassification\"\n    ELSE NULL::\"AccountClassification\"\nEND"))
  creditProvider           Json?                   @map("credit_provider")
  creditUser               Json?                   @map("credit_user")
  loanProvider             Json?                   @map("loan_provider")
  loanUser                 Json?                   @map("loan_user")
  credit                   Json?                   @default(dbgenerated("\nCASE\n    WHEN (num_nonnulls(credit_provider, credit_user) = 0) THEN NULL::jsonb\n    ELSE (COALESCE(credit_provider, '{}'::jsonb) || COALESCE(credit_user, '{}'::jsonb))\nEND"))
  loan                     Json?                   @default(dbgenerated("\nCASE\n    WHEN (num_nonnulls(loan_provider, loan_user) = 0) THEN NULL::jsonb\n    ELSE (COALESCE(loan_provider, '{}'::jsonb) || COALESCE(loan_user, '{}'::jsonb))\nEND"))
  availableBalanceStrategy AccountBalanceStrategy  @default(available) @map("available_balance_strategy")
  currentBalanceProvider   Decimal?                @map("current_balance_provider") @db.Decimal(19, 4)
  currentBalanceStrategy   AccountBalanceStrategy  @default(current) @map("current_balance_strategy")
  availableBalance         Decimal?                @default(dbgenerated("\nCASE available_balance_strategy\n    WHEN 'current'::\"AccountBalanceStrategy\" THEN current_balance_provider\n    WHEN 'available'::\"AccountBalanceStrategy\" THEN available_balance_provider\n    WHEN 'sum'::\"AccountBalanceStrategy\" THEN (available_balance_provider + current_balance_provider)\n    WHEN 'difference'::\"AccountBalanceStrategy\" THEN abs((available_balance_provider - current_balance_provider))\n    ELSE NULL::numeric\nEND")) @map("available_balance") @db.Decimal(19, 4)
  currentBalance           Decimal?                @default(dbgenerated("\nCASE current_balance_strategy\n    WHEN 'current'::\"AccountBalanceStrategy\" THEN current_balance_provider\n    WHEN 'available'::\"AccountBalanceStrategy\" THEN available_balance_provider\n    WHEN 'sum'::\"AccountBalanceStrategy\" THEN (current_balance_provider + available_balance_provider)\n    WHEN 'difference'::\"AccountBalanceStrategy\" THEN abs((current_balance_provider - available_balance_provider))\n    ELSE NULL::numeric\nEND")) @map("current_balance") @db.Decimal(19, 4)
  accountConnection        AccountConnection?      @relation(fields: [accountConnectionId], references: [id], onDelete: Cascade)
  user                     User?                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  balances                 AccountBalance[]
  conversations            Conversation[]
  holdings                 Holding[]
  investmentTransactions   InvestmentTransaction[]
  transactions             Transaction[]
  valuations               Valuation[]

  @@unique([accountConnectionId, plaidAccountId])
  @@unique([accountConnectionId, finicityAccountId])
  @@index([accountConnectionId])
  @@index([userId])
  @@map("account")
}

model Holding {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  accountId          Int      @map("account_id")
  securityId         Int      @map("security_id")
  value              Decimal  @db.Decimal(19, 4)
  quantity           Decimal  @db.Decimal(36, 18)
  costBasisProvider  Decimal? @map("cost_basis_provider") @db.Decimal(23, 8)
  currencyCode       String   @default("USD") @map("currency_code")
  plaidHoldingId     String?  @unique @map("plaid_holding_id")
  finicityPositionId String?  @unique @map("finicity_position_id")
  costBasisUser      Decimal? @map("cost_basis_user") @db.Decimal(23, 8)
  costBasis          Decimal? @default(dbgenerated("COALESCE(cost_basis_user, cost_basis_provider)")) @map("cost_basis") @db.Decimal(23, 8)
  excluded           Boolean  @default(false)
  account            Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  security           Security @relation(fields: [securityId], references: [id], onDelete: Cascade)

  @@map("holding")
}

model InvestmentTransaction {
  id                                Int                           @id @default(autoincrement())
  createdAt                         DateTime                      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                         DateTime                      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  accountId                         Int                           @map("account_id")
  securityId                        Int?                          @map("security_id")
  date                              DateTime                      @db.Date
  name                              String
  amount                            Decimal                       @db.Decimal(19, 4)
  quantity                          Decimal                       @db.Decimal(36, 18)
  price                             Decimal                       @db.Decimal(23, 8)
  currencyCode                      String                        @default("USD") @map("currency_code")
  plaidInvestmentTransactionId      String?                       @unique @map("plaid_investment_transaction_id")
  plaidType                         String?                       @map("plaid_type")
  plaidSubtype                      String?                       @map("plaid_subtype")
  finicityInvestmentTransactionType String?                       @map("finicity_investment_transaction_type")
  finicityTransactionId             String?                       @unique @map("finicity_transaction_id")
  flow                              TransactionFlow               @default(dbgenerated("\nCASE\n    WHEN (amount < (0)::numeric) THEN 'INFLOW'::\"TransactionFlow\"\n    ELSE 'OUTFLOW'::\"TransactionFlow\"\nEND"))
  fees                              Decimal?                      @db.Decimal(19, 4)
  category                          InvestmentTransactionCategory @default(dbgenerated("\nCASE\n    WHEN (plaid_type = 'buy'::text) THEN 'buy'::\"InvestmentTransactionCategory\"\n    WHEN (plaid_type = 'sell'::text) THEN 'sell'::\"InvestmentTransactionCategory\"\n    WHEN (plaid_subtype = ANY (ARRAY['dividend'::text, 'qualified dividend'::text, 'non-qualified dividend'::text])) THEN 'dividend'::\"InvestmentTransactionCategory\"\n    WHEN (plaid_subtype = ANY (ARRAY['non-resident tax'::text, 'tax'::text, 'tax withheld'::text])) THEN 'tax'::\"InvestmentTransactionCategory\"\n    WHEN ((plaid_type = 'fee'::text) OR (plaid_subtype = ANY (ARRAY['account fee'::text, 'legal fee'::text, 'management fee'::text, 'margin expense'::text, 'transfer fee'::text, 'trust fee'::text]))) THEN 'fee'::\"InvestmentTransactionCategory\"\n    WHEN (plaid_type = 'cash'::text) THEN 'transfer'::\"InvestmentTransactionCategory\"\n    WHEN (plaid_type = 'cancel'::text) THEN 'cancel'::\"InvestmentTransactionCategory\"\n    WHEN (finicity_investment_transaction_type = ANY (ARRAY['purchased'::text, 'purchaseToClose'::text, 'purchaseToCover'::text, 'dividendReinvest'::text, 'reinvestOfIncome'::text])) THEN 'buy'::\"InvestmentTransactionCategory\"\n    WHEN (finicity_investment_transaction_type = ANY (ARRAY['sold'::text, 'soldToClose'::text, 'soldToOpen'::text])) THEN 'sell'::\"InvestmentTransactionCategory\"\n    WHEN (finicity_investment_transaction_type = 'dividend'::text) THEN 'dividend'::\"InvestmentTransactionCategory\"\n    WHEN (finicity_investment_transaction_type = 'tax'::text) THEN 'tax'::\"InvestmentTransactionCategory\"\n    WHEN (finicity_investment_transaction_type = 'fee'::text) THEN 'fee'::\"InvestmentTransactionCategory\"\n    WHEN (finicity_investment_transaction_type = ANY (ARRAY['transfer'::text, 'contribution'::text, 'deposit'::text, 'income'::text, 'interest'::text])) THEN 'transfer'::\"InvestmentTransactionCategory\"\n    WHEN (finicity_investment_transaction_type = 'cancel'::text) THEN 'cancel'::\"InvestmentTransactionCategory\"\n    ELSE 'other'::\"InvestmentTransactionCategory\"\nEND"))
  account                           Account                       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  security                          Security?                     @relation(fields: [securityId], references: [id], onDelete: Cascade)

  @@index([accountId, date])
  @@map("investment_transaction")
}

model Security {
  id                     Int                     @id @default(autoincrement())
  createdAt              DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt              DateTime                @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  name                   String?
  symbol                 String?
  cusip                  String?
  isin                   String?
  currencyCode           String                  @default("USD") @map("currency_code")
  plaidSecurityId        String?                 @unique @map("plaid_security_id")
  plaidType              String?                 @map("plaid_type")
  pricingLastSyncedAt    DateTime?               @map("pricing_last_synced_at") @db.Timestamptz(6)
  sharesPerContract      Decimal?                @map("shares_per_contract") @db.Decimal(36, 18)
  finicitySecurityId     String?                 @map("finicity_security_id")
  finicitySecurityIdType String?                 @map("finicity_security_id_type")
  finicityAssetClass     String?                 @map("finicity_asset_class")
  finicityFIAssetClass   String?                 @map("finicity_fi_asset_class")
  finicityType           String?                 @map("finicity_type")
  plaidIsCashEquivalent  Boolean?                @map("plaid_is_cash_equivalent")
  isBrokerageCash        Boolean                 @default(false) @map("is_brokerage_cash")
  holdings               Holding[]
  investmentTransactions InvestmentTransaction[]
  pricing                SecurityPricing[]

  @@unique([finicitySecurityId, finicitySecurityIdType])
  @@map("security")
}

model SecurityPricing {
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  securityId Int      @map("security_id")
  date       DateTime @db.Date
  priceClose Decimal  @map("price_close") @db.Decimal(23, 8)
  source     String?
  priceAsOf  DateTime @default(now()) @map("price_as_of") @db.Timestamptz(6)
  security   Security @relation(fields: [securityId], references: [id], onDelete: Cascade)

  @@id([securityId, date])
  @@index([date])
  @@map("security_pricing")
}

model Transaction {
  id                           Int              @id @default(autoincrement())
  createdAt                    DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                    DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  name                         String
  amount                       Decimal          @db.Decimal(19, 4)
  pending                      Boolean          @default(false)
  date                         DateTime         @db.Date
  accountId                    Int              @map("account_id")
  currencyCode                 String           @default("USD") @map("currency_code")
  plaidTransactionId           String?          @unique @map("plaid_transaction_id")
  plaidCategory                String[]         @map("plaid_category")
  merchantName                 String?          @map("merchant_name")
  finicityCategorization       Json?            @map("finicity_categorization")
  finicityTransactionId        String?          @unique @map("finicity_transaction_id")
  finicityType                 String?          @map("finicity_type")
  excluded                     Boolean          @default(false)
  plaidCategoryId              String?          @map("plaid_category_id")
  plaidPersonalFinanceCategory Json?            @map("plaid_personal_finance_category")
  flow                         TransactionFlow  @default(dbgenerated("\nCASE\n    WHEN (amount < (0)::numeric) THEN 'INFLOW'::\"TransactionFlow\"\n    ELSE 'OUTFLOW'::\"TransactionFlow\"\nEND"))
  categoryUser                 String?          @map("category_user")
  category                     String           @default(dbgenerated("COALESCE(category_user,\nCASE\n    WHEN ((plaid_personal_finance_category ->> 'primary'::text) = 'INCOME'::text) THEN 'Income'::text\n    WHEN ((plaid_personal_finance_category ->> 'detailed'::text) = ANY (ARRAY['LOAN_PAYMENTS_MORTGAGE_PAYMENT'::text, 'RENT_AND_UTILITIES_RENT'::text])) THEN 'Housing Payments'::text\n    WHEN ((plaid_personal_finance_category ->> 'detailed'::text) = 'LOAN_PAYMENTS_CAR_PAYMENT'::text) THEN 'Vehicle Payments'::text\n    WHEN ((plaid_personal_finance_category ->> 'primary'::text) = 'LOAN_PAYMENTS'::text) THEN 'Other Payments'::text\n    WHEN ((plaid_personal_finance_category ->> 'primary'::text) = 'HOME_IMPROVEMENT'::text) THEN 'Home Improvement'::text\n    WHEN ((plaid_personal_finance_category ->> 'primary'::text) = 'GENERAL_MERCHANDISE'::text) THEN 'Shopping'::text\n    WHEN (((plaid_personal_finance_category ->> 'primary'::text) = 'RENT_AND_UTILITIES'::text) AND ((plaid_personal_finance_category ->> 'detailed'::text) <> 'RENT_AND_UTILITIES_RENT'::text)) THEN 'Utilities'::text\n    WHEN ((plaid_personal_finance_category ->> 'primary'::text) = 'FOOD_AND_DRINK'::text) THEN 'Food and Drink'::text\n    WHEN ((plaid_personal_finance_category ->> 'primary'::text) = 'TRANSPORTATION'::text) THEN 'Transportation'::text\n    WHEN ((plaid_personal_finance_category ->> 'primary'::text) = 'TRAVEL'::text) THEN 'Travel'::text\n    WHEN (((plaid_personal_finance_category ->> 'primary'::text) = ANY (ARRAY['PERSONAL_CARE'::text, 'MEDICAL'::text])) AND ((plaid_personal_finance_category ->> 'detailed'::text) <> 'MEDICAL_VETERINARY_SERVICES'::text)) THEN 'Health'::text\n    WHEN ((finicity_categorization ->> 'category'::text) = ANY (ARRAY['Income'::text, 'Paycheck'::text])) THEN 'Income'::text\n    WHEN ((finicity_categorization ->> 'category'::text) = 'Mortgage & Rent'::text) THEN 'Housing Payments'::text\n    WHEN ((finicity_categorization ->> 'category'::text) = ANY (ARRAY['Furnishings'::text, 'Home Services'::text, 'Home Improvement'::text, 'Lawn and Garden'::text])) THEN 'Home Improvement'::text\n    WHEN ((finicity_categorization ->> 'category'::text) = ANY (ARRAY['Streaming Services'::text, 'Home Phone'::text, 'Television'::text, 'Bills & Utilities'::text, 'Utilities'::text, 'Internet / Broadband Charges'::text, 'Mobile Phone'::text])) THEN 'Utilities'::text\n    WHEN ((finicity_categorization ->> 'category'::text) = ANY (ARRAY['Fast Food'::text, 'Food & Dining'::text, 'Restaurants'::text, 'Coffee Shops'::text, 'Alcohol & Bars'::text, 'Groceries'::text])) THEN 'Food and Drink'::text\n    WHEN ((finicity_categorization ->> 'category'::text) = ANY (ARRAY['Auto & Transport'::text, 'Gas & Fuel'::text, 'Auto Insurance'::text])) THEN 'Transportation'::text\n    WHEN ((finicity_categorization ->> 'category'::text) = ANY (ARRAY['Hotel'::text, 'Travel'::text, 'Rental Car & Taxi'::text])) THEN 'Travel'::text\n    WHEN ((finicity_categorization ->> 'category'::text) = ANY (ARRAY['Health Insurance'::text, 'Doctor'::text, 'Pharmacy'::text, 'Eyecare'::text, 'Health & Fitness'::text, 'Personal Care'::text])) THEN 'Health'::text\n    ELSE 'Other'::text\nEND)"))
  matchId                      Int?             @map("match_id")
  typeUser                     TransactionType? @map("type_user")
  account                      Account          @relation(fields: [accountId], references: [id], onDelete: Cascade)
  match                        Transaction?     @relation("MatchedTransaction", fields: [matchId], references: [id])
  matches                      Transaction[]    @relation("MatchedTransaction")

  @@index([accountId, date])
  @@index([amount])
  @@map("transaction")
}

model Valuation {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  accountId    Int      @map("account_id")
  source       String
  amount       Decimal  @db.Decimal(19, 4)
  currencyCode String   @default("USD") @map("currency_code")
  date         DateTime @db.Date
  account      Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, source, date])
  @@index([accountId, date])
  @@map("valuation")
}

model User {
  id                     Int                 @id @default(autoincrement())
  createdAt              DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt              DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  auth0Id                String              @unique @map("auth0_id")
  isoCurrencyCode        String              @default("USD") @map("iso_currency_code")
  finicityCustomerId     String?             @unique @map("finicity_customer_id")
  finicityUsername       String?             @unique @map("finicity_username")
  monthlyDebtUser        Decimal?            @map("monthly_debt_user") @db.Decimal(19, 4)
  monthlyExpensesUser    Decimal?            @map("monthly_expenses_user") @db.Decimal(19, 4)
  monthlyIncomeUser      Decimal?            @map("monthly_income_user") @db.Decimal(19, 4)
  stripeCancelAt         DateTime?           @map("stripe_cancel_at") @db.Timestamptz(6)
  stripeCurrentPeriodEnd DateTime?           @map("stripe_current_period_end") @db.Timestamptz(6)
  stripeCustomerId       String?             @unique @map("stripe_customer_id")
  stripePriceId          String?             @map("stripe_price_id")
  stripeSubscriptionId   String?             @unique @map("stripe_subscription_id")
  ataAll                 Boolean             @default(true) @map("ata_all")
  ataClosed              Boolean             @default(true) @map("ata_closed")
  ataExpire              Boolean             @default(true) @map("ata_expire")
  ataReview              Boolean             @default(true) @map("ata_review")
  ataSubmitted           Boolean             @default(true) @map("ata_submitted")
  ataUpdate              Boolean             @default(true) @map("ata_update")
  convertKitId           Int?                @map("convert_kit_id")
  advisorNotes           String?             @map("advisor_notes")
  household              Household?
  maybeGoals             MaybeGoal[]         @map("maybe_goals")
  maybeGoalsDescription  String?             @map("maybe_goals_description")
  maybe                  String?
  title                  String?
  memberNumber           Int                 @unique @default(autoincrement()) @map("member_number")
  dob                    DateTime?           @db.Date
  email                  String              @db.Citext
  firstName              String?             @map("first_name")
  lastName               String?             @map("last_name")
  picture                String?
  memberId               String              @unique @default(dbgenerated("gen_random_uuid()")) @map("member_id")
  riskAnswers            Json                @default("[]") @map("risk_answers")
  userNotes              String?             @map("user_notes")
  goals                  String[]
  name                   String?             @default(dbgenerated("\nCASE\n    WHEN (first_name IS NULL) THEN last_name\n    WHEN (last_name IS NULL) THEN first_name\n    ELSE ((first_name || ' '::text) || last_name)\nEND"))
  onboarding             Json?               @map("onboarding")
  country                String?
  state                  String?
  plaidLinkToken         String?             @map("plaid_link_token")
  linkAccountDismissedAt DateTime?           @map("link_account_dismissed_at") @db.Timestamptz(6)
  trialEnd               DateTime?           @default(dbgenerated("(now() + '14 days'::interval)")) @map("trial_end") @db.Timestamptz(6)
  dependents             Int?
  grossIncome            Int?                @map("gross_income")
  incomeType             String?             @map("income_type")
  taxStatus              TaxStatus?          @map("tax_status")
  trialReminderSent      DateTime?           @map("trial_reminder_sent") @db.Timestamptz(6)
  accounts               Account[]
  accountConnections     AccountConnection[]
  advisor                Advisor?
  conversations          Conversation[]
  conversationNotes      ConversationNote[]
  messages               Message[]
  plans                  Plan[]
  signedAgreements       SignedAgreement[]

  @@map("user")
}

model Institution {
  id           Int                   @id @default(autoincrement())
  createdAt    DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  name         String
  logo         String?
  primaryColor String?               @map("primary_color")
  logoUrl      String?               @map("logo_url")
  url          String?
  providers    ProviderInstitution[]

  @@unique([name, url])
  @@map("institution")
}

model ProviderInstitution {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  provider      Provider
  providerId    String       @map("provider_id")
  institutionId Int?         @map("institution_id")
  rank          Int          @default(0)
  name          String
  url           String?
  logo          String?
  logoUrl       String?      @map("logo_url")
  primaryColor  String?      @map("primary_color")
  data          Json?
  oauth         Boolean      @default(false)
  institution   Institution? @relation(fields: [institutionId], references: [id])

  @@unique([provider, providerId])
  @@map("provider_institution")
}

model Plan {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  userId         Int             @map("user_id")
  name           String
  lifeExpectancy Int             @default(85) @map("life_expectancy")
  conversations  Conversation[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  events         PlanEvent[]
  milestones     PlanMilestone[]

  @@map("plan")
}

model PlanEvent {
  id               Int                @id @default(autoincrement())
  createdAt        DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  planId           Int                @map("plan_id")
  name             String
  startYear        Int?               @map("start_year")
  startMilestoneId Int?               @map("start_milestone_id")
  endYear          Int?               @map("end_year")
  endMilestoneId   Int?               @map("end_milestone_id")
  frequency        PlanEventFrequency @default(yearly)
  initialValue     Decimal?           @map("initial_value") @db.Decimal(19, 4)
  initialValueRef  String?            @map("initial_value_ref")
  rate             Decimal            @default(0) @db.Decimal(6, 4)
  category         String?
  endMilestone     PlanMilestone?     @relation("EndEvents", fields: [endMilestoneId], references: [id], onDelete: Cascade)
  plan             Plan               @relation(fields: [planId], references: [id], onDelete: Cascade)
  startMilestone   PlanMilestone?     @relation("StartEvents", fields: [startMilestoneId], references: [id], onDelete: Cascade)

  @@map("plan_event")
}

model PlanMilestone {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  planId          Int               @map("plan_id")
  name            String
  type            PlanMilestoneType
  year            Int?
  expenseMultiple Float?            @map("expense_multiple")
  expenseYears    Int?              @map("expense_years")
  category        String            @default("retirement")
  endEvents       PlanEvent[]       @relation("EndEvents")
  startEvents     PlanEvent[]       @relation("StartEvents")
  plan            Plan              @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("plan_milestone")
}

model Advisor {
  id             Int                   @id @default(autoincrement())
  createdAt      DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  userId         Int                   @unique @map("user_id")
  title          String
  bio            String
  approvalStatus ApprovalStatus        @default(pending) @map("approval_status")
  avatarSrc      String                @map("avatar_src")
  fullName       String                @map("full_name")
  user           User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations  ConversationAdvisor[]

  @@map("advisor")
}

model Conversation {
  id              Int                   @id @default(autoincrement())
  createdAt       DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  status          ConversationStatus    @default(open)
  title           String
  userId          Int                   @map("user_id")
  expiryEmailSent DateTime?             @map("expiry_email_sent") @db.Timestamptz(6)
  accountId       Int?                  @map("account_id")
  planId          Int?                  @map("plan_id")
  account         Account?              @relation(fields: [accountId], references: [id])
  plan            Plan?                 @relation(fields: [planId], references: [id])
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  advisors        ConversationAdvisor[]
  notes           ConversationNote[]
  messages        Message[]

  @@map("conversation")
}

model ConversationAdvisor {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  conversationId Int          @map("conversation_id")
  advisorId      Int          @map("advisor_id")
  advisor        Advisor      @relation(fields: [advisorId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([conversationId, advisorId])
  @@map("conversation_advisor")
}

model ConversationNote {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  userId         Int          @map("user_id")
  conversationId Int          @map("conversation_id")
  body           String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@map("conversation_note")
}

model Message {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  conversationId Int          @map("conversation_id")
  userId         Int?         @map("user_id")
  type           MessageType
  body           String?
  mediaSrc       String?      @map("media_src")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User?        @relation(fields: [userId], references: [id])

  @@map("message")
}

model AuditEvent {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  type      AuditEventType
  modelType String         @map("model_type")
  modelId   Int            @map("model_id")
  data      Json
  userId    Int?           @map("user_id")

  @@map("audit_event")
}

model Agreement {
  id       Int               @id @default(autoincrement())
  type     AgreementType
  revision DateTime          @db.Date
  src      String            @unique
  active   Boolean           @default(false)
  signers  SignedAgreement[]

  @@unique([type, revision, active])
  @@map("agreement")
}

model SignedAgreement {
  signedAt    DateTime  @default(now()) @map("signed_at") @db.Timestamptz(6)
  userId      Int       @map("user_id")
  agreementId Int       @map("agreement_id")
  src         String?
  agreement   Agreement @relation(fields: [agreementId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, agreementId])
  @@map("signed_agreement")
}

enum AccountConnectionStatus {
  OK
  ERROR
  DISCONNECTED
}

enum AccountSyncStatus {
  IDLE
  PENDING
  SYNCING
}

enum AccountConnectionType {
  plaid
  finicity
}

enum AccountType {
  INVESTMENT
  DEPOSITORY
  CREDIT
  LOAN
  PROPERTY
  VEHICLE
  OTHER_ASSET
  OTHER_LIABILITY
}

enum AccountCategory {
  cash
  investment
  crypto
  property
  vehicle
  valuable
  loan
  credit
  other
}

enum AccountProvider {
  user
  plaid
  finicity
}

enum AccountBalanceStrategy {
  current
  available
  sum
  difference
}

enum AccountClassification {
  asset
  liability
}

enum InvestmentTransactionCategory {
  buy
  sell
  dividend
  transfer
  tax
  fee
  cancel
  other
}

enum TransactionFlow {
  INFLOW
  OUTFLOW
}

enum TransactionType {
  INCOME
  EXPENSE
  PAYMENT
  TRANSFER
}

enum Household {
  single
  singleWithDependents
  dual
  dualWithDependents
  retired
}

enum MaybeGoal {
  aggregate
  advice
  plan
}

enum TaxStatus {
  single
  married_joint
  married_separate
  head_of_household
  qualifying_widow
}

enum Provider {
  PLAID
  FINICITY
}

enum PlanEventFrequency {
  monthly
  yearly
}

enum PlanMilestoneType {
  year
  net_worth
}

enum ApprovalStatus {
  pending
  approved
  rejected
}

enum ConversationStatus {
  open
  closed
}

enum MessageType {
  text
  audio
  video
}

enum AuditEventType {
  insert
  update
  delete
}

enum AgreementType {
  fee
  form_adv_2a
  form_adv_2b
  form_crs
  privacy_policy
}
